<?xml version="1.0"?>
<!--
ROS2 Control Configuration Macro for Hexapod Robot URDF Model

This Xacro macro is responsible for configuring the ros2_control system within
the hexapod robot's URDF model. It defines hardware interfaces, joint configurations,
and control plugins that enable seamless integration between the physical robot,
simulation environment, and ROS2 control framework.

The macro supports three operational modes:
1. Gazebo simulation - for virtual robot testing
2. Mock hardware - for algorithm development without physical robot
3. Real hardware - for actual ESP32-based hexapod control
-->

<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    
    <!--
    Parameters:
        initial_positions_file (string): Path to YAML file containing initial joint positions
        use_gazebo (bool): Enable Gazebo simulation hardware interface
        use_fake_hardware (bool): Enable mock hardware for testing
        fake_sensor_commands (bool): Enable fake sensor command simulation
        port_name (string): Serial port for ESP32 communication (e.g., /dev/ttyUSB0)
        baud_rate (int): Communication baud rate for ESP32 (typically 115200)
    -->
    <xacro:macro name="hexapod_ros2_control" params="name initial_positions_file use_gazebo use_fake_hardware:=false fake_sensor_commands port_name baud_rate">
        
        <!-- Load initial joint positions from external YAML configuration file -->
        <xacro:property name="initial_positions" value="${xacro.load_yaml(initial_positions_file)['initial_positions']}"/>
        
        <!-- ROS2 Control System Definition -->
        <ros2_control name="${name}" type="system">
        
        <!-- Priority 1: Gazebo simulation hardware interface -->
        <!-- Used for physics-based simulation testing and development -->
        <xacro:if value="${use_gazebo}">
            <hardware>
                <plugin>gz_ros2_control/GazeboSimSystem</plugin>
            </hardware>
        </xacro:if>

        <!-- Priority 2: Mock hardware interface for algorithm testing -->
        <!-- Provides fake hardware responses for development without physical robot -->
        <xacro:unless value="${use_gazebo}">
            <xacro:if value="${use_fake_hardware}">
                <hardware>
                    <plugin>mock_components/GenericSystem</plugin>
                    <!-- Enable fake sensor command simulation for testing -->
                    <param name="fake_sensor_commands">${fake_sensor_commands}</param>
                    <!-- No offset between commanded and actual positions in mock mode -->
                    <param name="state_following_offset">0.0</param>
                </hardware>
            </xacro:if>
        </xacro:unless>

        <!-- Priority 3: Real hardware interface with ESP32 microcontroller -->
        <!-- Communicates with physical hexapod via serial connection -->
        <xacro:unless value="${use_gazebo}">
            <xacro:unless value="${use_fake_hardware}">
                <hardware>
                    <plugin>hexapod_hardware/HexapodHardwareInterface</plugin>
                    <!-- Serial port configuration for ESP32 communication -->
                    <param name="port_name">${port_name}</param>
                    <param name="baud_rate">${baud_rate}</param>
                </hardware>
            </xacro:unless>
        </xacro:unless>

            <!-- JOINT INTERFACE DEFINITIONS                                       -->
            <!-- Each leg has 3 joints for 18 total actuated joints                -->

            <!-- Leg 1 joints (Front-right leg) -->
            <joint name="joint1_1">  
                <command_interface name="position"/>  <!-- controlling joint positions -->
                <state_interface name="position">    
                  <param name="initial_value">${initial_positions['joint1_1']}</param> <!-- Configuring initial value -->
                </state_interface>
                <state_interface name="velocity"/>    
            </joint>
            <joint name="joint2_1">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint2_1']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint3_1">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint3_1']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            
            <!-- Leg 2 joints (Middle-right leg) -->
            <joint name="joint1_2">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint1_2']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint2_2">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint2_2']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint3_2">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint3_2']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            
            <!-- Leg 3 joints (Rear-right leg) -->
            <joint name="joint1_3">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint1_3']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint2_3">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint2_3']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint3_3">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint3_3']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            
            <!-- Leg 4 joints (Rear-left leg) -->
            <joint name="joint1_4">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint1_4']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint2_4">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint2_4']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint3_4">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint3_4']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>

            
            <!-- Leg 5 joints (Middle-left leg) -->
            <joint name="joint1_5">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint1_5']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint2_5">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint2_5']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint3_5">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint3_5']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            
            <!-- Leg 6 joints (Front-left leg) -->
            <joint name="joint1_6">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint1_6']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint2_6">  
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint2_6']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>
            <joint name="joint3_6"> 
                <command_interface name="position"/>
                <state_interface name="position">
                  <param name="initial_value">${initial_positions['joint3_6']}</param>
                </state_interface>
                <state_interface name="velocity"/>
            </joint>

        </ros2_control>
    </xacro:macro>
</robot>